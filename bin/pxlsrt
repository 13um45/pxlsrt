#!/usr/bin/env jruby

require 'pxlsrt'
require 'thor'

class CLI < Thor
	#class_option :verbose, :type => :boolean, :default => false, :aliases => "-V"

	option :reverse, :default => false, :aliases => "-r", :type => :boolean
	option :vertical, :type => :boolean, :default => false, :aliases => "-v"
	option :diagonal, :type => :boolean, :default => false, :aliases => "-d"
	option :method, :type => :string, :default => "sum-rgb", :banner => "[#{PxlsrtJ::Colors::METHODS.join(" | ")}]", :aliases => "-m", :enum => PxlsrtJ::Colors::METHODS
	option :middle, :default => false, :aliases => "-M"
	option :min, :type => :numeric, :default => Float::INFINITY, :banner => "MINIMUM BANDWIDTH"
	option :max, :type => :numeric, :default => Float::INFINITY, :banner => "MAXIMUM BANDWIDTH"
	desc "brute INPUT OUTPUT [options]", "Brute pixel sorting"
	##
	# Specific options:
	# * min - Minimum bandwidth.
	# * max - Maximum bandwidth.
	def brute(input, output)
		k={:trusted=>true}
		for o in options.keys
			k[o.to_sym]=options[o]
		end
		PxlsrtJ::Brute.suite(input, output, k)
	end

	option :reverse, :default => false, :aliases => "-r", :type => :boolean
	option :vertical, :type => :boolean, :default => false, :aliases => "-v"
	option :diagonal, :type => :boolean, :default => false, :aliases => "-d"
	option :method, :type => :string, :default => "sum-rgb", :banner => "[#{PxlsrtJ::Colors::METHODS.join(" | ")}]", :aliases => "-m", :enum => PxlsrtJ::Colors::METHODS
	option :middle, :default => false, :aliases => "-M"
	option :absolute, :type => :boolean, :default => false, :aliases => "-a", :banner => "ABSOLUTE EDGE FINDING"
	option :threshold, :type => :numeric, :default => 20, :aliases => "-t"
	desc "smart INPUT OUTPUT [options]", "Smart pixel sorting"
	##
	# Specific options:
	# * threshold - Number used in edge finding. Specifics explained under "absolute".
	# * absolute - Make edge finding absolute over relative. For example, define a range as a collection of values under the threshold. Relative edge finding is when the contrast of the next pixel is larger than the threshold.
	def smart(input, output)
		k={:trusted=>true}
		for o in options.keys
			k[o.to_sym]=options[o]
		end
		PxlsrtJ::Smart.suite(input, output, k)
	end

	option :method, :type => :string, :default => "brightness", :aliases => "-m", :enum => ["brightness", "white", "black"]
	option :value, :type => :numeric, :aliases => "-v"
	desc "kim INPUT OUTPUT [options]", "Uses Kim Asendorf's algorithm"
	def kim(input, output)
		k= {:trusted => true}
		for o in options.keys
			k[o.to_sym] = options[o]
		end
		PxlsrtJ::Kim.suite(input, output, k)
	end
end

CLI.start(ARGV)